services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    labels:
      - "logging.promtail=true"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    labels:
      - "logging.promtail=true"
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  redis-cluster:
    image: grokzen/redis-cluster:7.0.10
    labels:
      - "logging.promtail=true"
    environment:
      IP: 0.0.0.0
      INITIAL_PORT: 7000
      MASTERS: 3
      SLAVES_PER_MASTER: 1
      DEFAULT_PASSWORD: password
    restart: always
    ports:
      - '7000-7005:7000-7005'
    networks:
      - backend
  
  postgres:
    image: postgres
    labels:
      - "logging.promtail=true"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5432:5432'
    volumes: 
      - postgres:/var/lib/postgresql/data
    networks:
      - backend

  mongo:
    restart: always
    image: mongo:7.0-rc
    labels:
      - "logging.promtail=true"
    volumes:
      - mongo:/data/db
    networks:
      - backend
    ports:
      - 27017:27017
    expose:
      - 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo 
      MONGO_INITDB_ROOT_PASSWORD: password

  keycloak:
    image: quay.io/keycloak/keycloak
    labels:
      - "logging.promtail=true"
    user: root
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_USER: postgres
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - "start-dev"
    ports:
      - 8080:8080
    depends_on:
      - postgres
    networks:
      - backend
    volumes:
      - keycloak:/opt/keycloak/data/h2:rw

  prometheus:
    image: prom/prometheus:latest
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
      - --enable-feature=remote-write-receiver
      - --web.enable-otlp-receiver
    volumes:
      - ./test/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.97.0
    restart: on-failure
    user: '0:0' # required for logs
    volumes:
      - ./test/otel-collector.yaml:/etc/otelcol-contrib/config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55679:55679" # zpages extension
    depends_on:
      - prometheus
    networks:
      - backend

  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    volumes:
      - loki:/loki
      - ./test/loki.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - backend

  promtail:
    image: grafana/promtail:2.9.2
    ports:
      - "9080:9080"
    volumes:
      - /var/log:/var/log
      - ./test/promtail.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - backend

  tempo:
    hostname: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./test/tempo.yaml:/etc/tempo.yaml
      - tempo:/var/tempo
    ports:
      - "3200" # tempo
      - "4317" # otlp grpc
    networks:
      - backend

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DIABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor metricsSummary
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-exploretraces-app/grafana-exploretraces-app-latest.zip;grafana-traces-app;grafana-pyroscope-app
    volumes:
      - ./test/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - backend

  envoy:
    image: envoyproxy/envoy:v1.32-latest
    labels:
      - "logging.promtail=true"
    volumes:
      - ./test/envoy.yaml:/etc/envoy/envoy.yaml
      - ./test/localhost.crt:/etc/envoy/localhost.crt
      - ./test/localhost.key:/etc/envoy/localhost.key
    ports:
      - "9091:9091"
      - "9911:9911"
    working_dir: /etc/envoy
    command: ["envoy", "-l", "debug", "-c", "/etc/envoy/envoy.yaml"]
    networks:
      - backend

  pyroscope:
    image: grafana/pyroscope:latest
    ports:
    - 4040:4040
    networks:
      - backend


volumes:
  postgres:
    driver: local
  keycloak:
    driver: local
  mongo:
    driver: local
  loki:
    driver: local
  tempo:
    driver: local

networks:
  backend:
