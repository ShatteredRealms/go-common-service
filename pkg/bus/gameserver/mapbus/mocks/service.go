// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/dev/sro/go-common-service/pkg/bus/gameserver/mapbus/service.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/dev/sro/go-common-service/pkg/bus/gameserver/mapbus/service.go -destination=/home/wil/dev/sro/go-common-service/pkg/bus/gameserver/mapbus/mocks/service.go
//

// Package mock_mapbus is a generated GoMock package.
package mock_mapbus

import (
	context "context"
	reflect "reflect"

	mapbus "github.com/ShatteredRealms/go-common-service/pkg/bus/gameserver/mapbus"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetMapById mocks base method.
func (m *MockService) GetMapById(ctx context.Context, mId string) (*mapbus.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapById", ctx, mId)
	ret0, _ := ret[0].(*mapbus.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapById indicates an expected call of GetMapById.
func (mr *MockServiceMockRecorder) GetMapById(ctx, mId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapById", reflect.TypeOf((*MockService)(nil).GetMapById), ctx, mId)
}

// GetMaps mocks base method.
func (m *MockService) GetMaps(ctx context.Context) (*mapbus.Maps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaps", ctx)
	ret0, _ := ret[0].(*mapbus.Maps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaps indicates an expected call of GetMaps.
func (mr *MockServiceMockRecorder) GetMaps(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaps", reflect.TypeOf((*MockService)(nil).GetMaps), ctx)
}

// StartProcessingBus mocks base method.
func (m *MockService) StartProcessingBus(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartProcessingBus", ctx)
}

// StartProcessingBus indicates an expected call of StartProcessingBus.
func (mr *MockServiceMockRecorder) StartProcessingBus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcessingBus", reflect.TypeOf((*MockService)(nil).StartProcessingBus), ctx)
}

// StopProcessingBus mocks base method.
func (m *MockService) StopProcessingBus() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopProcessingBus")
}

// StopProcessingBus indicates an expected call of StopProcessingBus.
func (mr *MockServiceMockRecorder) StopProcessingBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProcessingBus", reflect.TypeOf((*MockService)(nil).StopProcessingBus))
}
