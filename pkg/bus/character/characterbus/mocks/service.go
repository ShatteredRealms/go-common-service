// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/dev/sro/go-common-service/pkg/bus/character/characterbus/service.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/dev/sro/go-common-service/pkg/bus/character/characterbus/service.go -destination=/home/wil/dev/sro/go-common-service/pkg/bus/character/characterbus/mocks/service.go
//

// Package mock_characterbus is a generated GoMock package.
package mock_characterbus

import (
	context "context"
	reflect "reflect"

	bus "github.com/ShatteredRealms/go-common-service/pkg/bus"
	characterbus "github.com/ShatteredRealms/go-common-service/pkg/bus/character/characterbus"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DoesOwnCharacter mocks base method.
func (m *MockService) DoesOwnCharacter(ctx context.Context, characterId, ownerId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesOwnCharacter", ctx, characterId, ownerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesOwnCharacter indicates an expected call of DoesOwnCharacter.
func (mr *MockServiceMockRecorder) DoesOwnCharacter(ctx, characterId, ownerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesOwnCharacter", reflect.TypeOf((*MockService)(nil).DoesOwnCharacter), ctx, characterId, ownerId)
}

// GetCharacterById mocks base method.
func (m *MockService) GetCharacterById(ctx context.Context, characterId string) (*characterbus.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterById", ctx, characterId)
	ret0, _ := ret[0].(*characterbus.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterById indicates an expected call of GetCharacterById.
func (mr *MockServiceMockRecorder) GetCharacterById(ctx, characterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterById", reflect.TypeOf((*MockService)(nil).GetCharacterById), ctx, characterId)
}

// GetCharacters mocks base method.
func (m *MockService) GetCharacters(ctx context.Context) (*characterbus.Characters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacters", ctx)
	ret0, _ := ret[0].(*characterbus.Characters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacters indicates an expected call of GetCharacters.
func (mr *MockServiceMockRecorder) GetCharacters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacters", reflect.TypeOf((*MockService)(nil).GetCharacters), ctx)
}

// GetReader mocks base method.
func (m *MockService) GetReader() bus.MessageBusReader[characterbus.Message] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReader")
	ret0, _ := ret[0].(bus.MessageBusReader[characterbus.Message])
	return ret0
}

// GetReader indicates an expected call of GetReader.
func (mr *MockServiceMockRecorder) GetReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReader", reflect.TypeOf((*MockService)(nil).GetReader))
}

// IsProcessing mocks base method.
func (m *MockService) IsProcessing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProcessing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProcessing indicates an expected call of IsProcessing.
func (mr *MockServiceMockRecorder) IsProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProcessing", reflect.TypeOf((*MockService)(nil).IsProcessing))
}

// StartProcessing mocks base method.
func (m *MockService) StartProcessing(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartProcessing", ctx)
}

// StartProcessing indicates an expected call of StartProcessing.
func (mr *MockServiceMockRecorder) StartProcessing(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcessing", reflect.TypeOf((*MockService)(nil).StartProcessing), ctx)
}

// StopProcessing mocks base method.
func (m *MockService) StopProcessing() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopProcessing")
}

// StopProcessing indicates an expected call of StopProcessing.
func (mr *MockServiceMockRecorder) StopProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProcessing", reflect.TypeOf((*MockService)(nil).StopProcessing))
}
