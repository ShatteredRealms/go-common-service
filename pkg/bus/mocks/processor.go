// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/dev/sro/go-common-service/pkg/bus/processor.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/dev/sro/go-common-service/pkg/bus/processor.go -destination=/home/wil/dev/sro/go-common-service/pkg/bus/mocks/processor.go
//

// Package mock_bus is a generated GoMock package.
package mock_bus

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBusProcessor is a mock of BusProcessor interface.
type MockBusProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockBusProcessorMockRecorder
	isgomock struct{}
}

// MockBusProcessorMockRecorder is the mock recorder for MockBusProcessor.
type MockBusProcessorMockRecorder struct {
	mock *MockBusProcessor
}

// NewMockBusProcessor creates a new mock instance.
func NewMockBusProcessor(ctrl *gomock.Controller) *MockBusProcessor {
	mock := &MockBusProcessor{ctrl: ctrl}
	mock.recorder = &MockBusProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusProcessor) EXPECT() *MockBusProcessorMockRecorder {
	return m.recorder
}

// IsProcessing mocks base method.
func (m *MockBusProcessor) IsProcessing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProcessing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProcessing indicates an expected call of IsProcessing.
func (mr *MockBusProcessorMockRecorder) IsProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProcessing", reflect.TypeOf((*MockBusProcessor)(nil).IsProcessing))
}

// StartProcessing mocks base method.
func (m *MockBusProcessor) StartProcessing(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartProcessing", ctx)
}

// StartProcessing indicates an expected call of StartProcessing.
func (mr *MockBusProcessorMockRecorder) StartProcessing(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcessing", reflect.TypeOf((*MockBusProcessor)(nil).StartProcessing), ctx)
}

// StopProcessing mocks base method.
func (m *MockBusProcessor) StopProcessing() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopProcessing")
}

// StopProcessing indicates an expected call of StopProcessing.
func (mr *MockBusProcessorMockRecorder) StopProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProcessing", reflect.TypeOf((*MockBusProcessor)(nil).StopProcessing))
}
