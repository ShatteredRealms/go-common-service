// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/dev/sro/go-common-service/pkg/bus/bus.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/dev/sro/go-common-service/pkg/bus/bus.go -destination=/home/wil/dev/sro/go-common-service/pkg/bus/mocks/bus.go
//

// Package mock_bus is a generated GoMock package.
package mock_bus

import (
	context "context"
	reflect "reflect"

	bus "github.com/ShatteredRealms/go-common-service/pkg/bus"
	gomock "go.uber.org/mock/gomock"
)

// MockBusMessage is a mock of BusMessage interface.
type MockBusMessage[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockBusMessageMockRecorder[T]
	isgomock struct{}
}

// MockBusMessageMockRecorder is the mock recorder for MockBusMessage.
type MockBusMessageMockRecorder[T any] struct {
	mock *MockBusMessage[T]
}

// NewMockBusMessage creates a new mock instance.
func NewMockBusMessage[T any](ctrl *gomock.Controller) *MockBusMessage[T] {
	mock := &MockBusMessage[T]{ctrl: ctrl}
	mock.recorder = &MockBusMessageMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusMessage[T]) EXPECT() *MockBusMessageMockRecorder[T] {
	return m.recorder
}

// GetId mocks base method.
func (m *MockBusMessage[T]) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockBusMessageMockRecorder[T]) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockBusMessage[T])(nil).GetId))
}

// GetType mocks base method.
func (m *MockBusMessage[T]) GetType() bus.BusMessageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(bus.BusMessageType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockBusMessageMockRecorder[T]) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockBusMessage[T])(nil).GetType))
}

// MockBusModelMessage is a mock of BusModelMessage interface.
type MockBusModelMessage[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockBusModelMessageMockRecorder[T]
	isgomock struct{}
}

// MockBusModelMessageMockRecorder is the mock recorder for MockBusModelMessage.
type MockBusModelMessageMockRecorder[T any] struct {
	mock *MockBusModelMessage[T]
}

// NewMockBusModelMessage creates a new mock instance.
func NewMockBusModelMessage[T any](ctrl *gomock.Controller) *MockBusModelMessage[T] {
	mock := &MockBusModelMessage[T]{ctrl: ctrl}
	mock.recorder = &MockBusModelMessageMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusModelMessage[T]) EXPECT() *MockBusModelMessageMockRecorder[T] {
	return m.recorder
}

// GetId mocks base method.
func (m *MockBusModelMessage[T]) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockBusModelMessageMockRecorder[T]) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockBusModelMessage[T])(nil).GetId))
}

// GetType mocks base method.
func (m *MockBusModelMessage[T]) GetType() bus.BusMessageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(bus.BusMessageType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockBusModelMessageMockRecorder[T]) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockBusModelMessage[T])(nil).GetType))
}

// WasDeleted mocks base method.
func (m *MockBusModelMessage[T]) WasDeleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasDeleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WasDeleted indicates an expected call of WasDeleted.
func (mr *MockBusModelMessageMockRecorder[T]) WasDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasDeleted", reflect.TypeOf((*MockBusModelMessage[T])(nil).WasDeleted))
}

// MockResettable is a mock of Resettable interface.
type MockResettable struct {
	ctrl     *gomock.Controller
	recorder *MockResettableMockRecorder
	isgomock struct{}
}

// MockResettableMockRecorder is the mock recorder for MockResettable.
type MockResettableMockRecorder struct {
	mock *MockResettable
}

// NewMockResettable creates a new mock instance.
func NewMockResettable(ctrl *gomock.Controller) *MockResettable {
	mock := &MockResettable{ctrl: ctrl}
	mock.recorder = &MockResettableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResettable) EXPECT() *MockResettableMockRecorder {
	return m.recorder
}

// Reset mocks base method.
func (m *MockResettable) Reset(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockResettableMockRecorder) Reset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockResettable)(nil).Reset), arg0)
}

// MockMessageBusReader is a mock of MessageBusReader interface.
type MockMessageBusReader[T bus.BusMessage[any]] struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBusReaderMockRecorder[T]
	isgomock struct{}
}

// MockMessageBusReaderMockRecorder is the mock recorder for MockMessageBusReader.
type MockMessageBusReaderMockRecorder[T bus.BusMessage[any]] struct {
	mock *MockMessageBusReader[T]
}

// NewMockMessageBusReader creates a new mock instance.
func NewMockMessageBusReader[T bus.BusMessage[any]](ctrl *gomock.Controller) *MockMessageBusReader[T] {
	mock := &MockMessageBusReader[T]{ctrl: ctrl}
	mock.recorder = &MockMessageBusReaderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBusReader[T]) EXPECT() *MockMessageBusReaderMockRecorder[T] {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageBusReader[T]) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMessageBusReaderMockRecorder[T]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageBusReader[T])(nil).Close))
}

// FetchMessage mocks base method.
func (m *MockMessageBusReader[T]) FetchMessage(arg0 context.Context) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMessage", arg0)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMessage indicates an expected call of FetchMessage.
func (mr *MockMessageBusReaderMockRecorder[T]) FetchMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMessage", reflect.TypeOf((*MockMessageBusReader[T])(nil).FetchMessage), arg0)
}

// GetGroup mocks base method.
func (m *MockMessageBusReader[T]) GetGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockMessageBusReaderMockRecorder[T]) GetGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockMessageBusReader[T])(nil).GetGroup))
}

// GetMessageType mocks base method.
func (m *MockMessageBusReader[T]) GetMessageType() bus.BusMessageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageType")
	ret0, _ := ret[0].(bus.BusMessageType)
	return ret0
}

// GetMessageType indicates an expected call of GetMessageType.
func (mr *MockMessageBusReaderMockRecorder[T]) GetMessageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageType", reflect.TypeOf((*MockMessageBusReader[T])(nil).GetMessageType))
}

// ProcessFailed mocks base method.
func (m *MockMessageBusReader[T]) ProcessFailed() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessFailed")
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessFailed indicates an expected call of ProcessFailed.
func (mr *MockMessageBusReaderMockRecorder[T]) ProcessFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFailed", reflect.TypeOf((*MockMessageBusReader[T])(nil).ProcessFailed))
}

// ProcessSkipped mocks base method.
func (m *MockMessageBusReader[T]) ProcessSkipped(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSkipped", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessSkipped indicates an expected call of ProcessSkipped.
func (mr *MockMessageBusReaderMockRecorder[T]) ProcessSkipped(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSkipped", reflect.TypeOf((*MockMessageBusReader[T])(nil).ProcessSkipped), arg0)
}

// ProcessSucceeded mocks base method.
func (m *MockMessageBusReader[T]) ProcessSucceeded(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSucceeded", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessSucceeded indicates an expected call of ProcessSucceeded.
func (mr *MockMessageBusReaderMockRecorder[T]) ProcessSucceeded(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSucceeded", reflect.TypeOf((*MockMessageBusReader[T])(nil).ProcessSucceeded), arg0)
}

// Reset mocks base method.
func (m *MockMessageBusReader[T]) Reset(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockMessageBusReaderMockRecorder[T]) Reset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockMessageBusReader[T])(nil).Reset), arg0)
}

// MockMessageBusWriter is a mock of MessageBusWriter interface.
type MockMessageBusWriter[T bus.BusMessage[any]] struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBusWriterMockRecorder[T]
	isgomock struct{}
}

// MockMessageBusWriterMockRecorder is the mock recorder for MockMessageBusWriter.
type MockMessageBusWriterMockRecorder[T bus.BusMessage[any]] struct {
	mock *MockMessageBusWriter[T]
}

// NewMockMessageBusWriter creates a new mock instance.
func NewMockMessageBusWriter[T bus.BusMessage[any]](ctrl *gomock.Controller) *MockMessageBusWriter[T] {
	mock := &MockMessageBusWriter[T]{ctrl: ctrl}
	mock.recorder = &MockMessageBusWriterMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBusWriter[T]) EXPECT() *MockMessageBusWriterMockRecorder[T] {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageBusWriter[T]) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMessageBusWriterMockRecorder[T]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageBusWriter[T])(nil).Close))
}

// GetMessageType mocks base method.
func (m *MockMessageBusWriter[T]) GetMessageType() bus.BusMessageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageType")
	ret0, _ := ret[0].(bus.BusMessageType)
	return ret0
}

// GetMessageType indicates an expected call of GetMessageType.
func (mr *MockMessageBusWriterMockRecorder[T]) GetMessageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageType", reflect.TypeOf((*MockMessageBusWriter[T])(nil).GetMessageType))
}

// Publish mocks base method.
func (m *MockMessageBusWriter[T]) Publish(arg0 context.Context, arg1 T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMessageBusWriterMockRecorder[T]) Publish(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessageBusWriter[T])(nil).Publish), arg0, arg1)
}

// PublishMany mocks base method.
func (m *MockMessageBusWriter[T]) PublishMany(arg0 context.Context, arg1 []T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMany", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMany indicates an expected call of PublishMany.
func (mr *MockMessageBusWriterMockRecorder[T]) PublishMany(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMany", reflect.TypeOf((*MockMessageBusWriter[T])(nil).PublishMany), arg0, arg1)
}
